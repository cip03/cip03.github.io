<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Applicative Hazards</title>
    <link href="http://blog.mmn80.xyz/atom.xml" rel="self" />
    <link href="http://blog.mmn80.xyz" />
    <id>http://blog.mmn80.xyz/atom.xml</id>
    <author>
        <name>Călin Ardelean</name>
        <email>calinucs@gmail.com</email>
    </author>
    <updated>2016-02-14T00:00:00Z</updated>
    <entry>
    <title>Language-integrated databases: stumbles and mumbles</title>
    <link href="http://blog.mmn80.xyz/posts/2016-02-14-muesli.html" />
    <id>http://blog.mmn80.xyz/posts/2016-02-14-muesli.html</id>
    <published>2016-02-14T00:00:00Z</published>
    <updated>2016-02-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="abstract" class="section level2">
<h2>Abstract</h2>
<p>The state of the Haskell ecosystem with respect to databases has been characterized as <a href="https://github.com/Gabriel439/post-rfc/blob/master/sotu.md#databases-and-data-stores" title="State of the Haskell ecosystem - Gabriel Gonzales">immature</a>. Efforts have been made towards improving the bindings for various foreign systems, ensuring SQL query safety through static checking, and faking row polymorphism. An alternative approach is to implement a database as an EDSL. For example <a href="https://hackage.haskell.org/package/acid-state" title="acid-state - Hackage">acid-state</a> offers ACID semantics on top of normal serializable Haskell types. <a href="https://hackage.haskell.org/package/muesli" title="muesli - Hackage">muesli</a> takes this further by adding automatic index management, improving performance and removing much of the boilerplate, as needed in embedded environments.</p>
<div id="contents" class="section level3">
<h3>Contents</h3>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#the-problem">The problem</a></li>
<li><a href="#my-idea">My idea</a></li>
<li><a href="#the-details">The details</a></li>
<li><a href="#related-work">Related work</a></li>
<li><a href="#conclusions-and-further-work">Conclusions and further work</a>
<ul>
<li><a href="#immediate-upgrades">Immediate upgrades</a></li>
<li><a href="#hopes-dreams">Hopes &amp; dreams</a></li>
</ul></li>
</ul>
</div>
</div>
<div id="introduction" class="section level2">
<h2>Introduction</h2>
<p>1 page</p>
<ul>
<li>embedded apps require embedded database (implicit schema + no marshaling boilerplate + static safety only)</li>
<li>quotient design: transactions on top of standard serializable types</li>
<li>“language/runtime extension” design requires feature minimalism/power (purity)</li>
</ul>
</div>
<div id="the-problem" class="section level2">
<h2>The problem</h2>
<p>1 page</p>
<ul>
<li>acid-state poor performance (serializes queries, not data; all data in memory)</li>
<li>TH boilerplate &amp; marshaling code (eg: persistent)</li>
<li>indexing, efficient navigation</li>
</ul>
</div>
<div id="my-idea" class="section level2">
<h2>My idea</h2>
<p>2 pages</p>
<ul>
<li>multi-version concurrency</li>
<li>log file separate from data file</li>
<li>use GHC.Generics instead of TH</li>
<li>newtype &amp; phantom types for data consistency</li>
<li>add metadata for references and indexes</li>
<li>indexes implemented with standard containers</li>
</ul>
</div>
<div id="the-details" class="section level2">
<h2>The details</h2>
<p>5 pages</p>
</div>
<div id="related-work" class="section level2">
<h2>Related work</h2>
<p>1-2 pages</p>
<div id="boilerplate" class="section level3">
<h3>Boilerplate</h3>
<ul>
<li>persistent / esqueleto</li>
<li>safecopy</li>
</ul>
</div>
<div id="section" class="section level3">
<h3>???</h3>
<ul>
<li>vcache</li>
</ul>
</div>
<div id="persistence-implemented" class="section level3">
<h3>Persistence implemented</h3>
<ul>
<li>acid-state</li>
<li>CurryDB</li>
<li>datalog</li>
<li>DSH</li>
<li>HaskRel</li>
<li>HGraphStorage</li>
<li>keyvaluehash</li>
<li>perdure</li>
<li>hs-cdb</li>
<li>pure-cdb</li>
<li>qudb</li>
<li>RefSerialize</li>
<li>TCache</li>
<li>tx</li>
</ul>
</div>
</div>
<div id="conclusions-and-further-work" class="section level2">
<h2>Conclusions and further work</h2>
<ul>
<li>performance good enough for small/medium apps</li>
<li>implementation simple enough for beginners</li>
<li>hackage downloads</li>
<li>not ready for prime time</li>
<li>double buffering design</li>
</ul>
<div id="immediate-upgrades" class="section level3">
<h3>Immediate upgrades</h3>
<ul>
<li>migration</li>
<li>type safe field names &amp; checking field types in queries</li>
<li>cascade index for filtering on multiple fields</li>
<li>more indexes</li>
<li>joins</li>
<li>abstract query language + query optimization</li>
<li>QuickCheck, benchmarks</li>
</ul>
</div>
<div id="hopes-dreams" class="section level3">
<h3>Hopes &amp; dreams</h3>
<ul>
<li>remote queries, replication, static closures?</li>
</ul>
</div>
</div>]]></summary>
</entry>
<entry>
    <title>Pun hazards</title>
    <link href="http://blog.mmn80.xyz/posts/2016-02-12-name.html" />
    <id>http://blog.mmn80.xyz/posts/2016-02-12-name.html</id>
    <published>2016-02-12T00:00:00Z</published>
    <updated>2016-02-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="welcome" class="section level2">
<h2>Welcome!</h2>
<p>This is my personal blog on functional programming and its application to real-time simulations. There may be occasional posts on logic + math, and hopefully not too many rants.</p>
<p>I couldn’t find a rigid designator for it so I’m going with the lazy pun instead.</p>
<p>Some other blogs that I like are <a href="http://bartoszmilewski.com/" title="Bartosz Milewski&#39;s Programming Cafe">Bartosz Milewski’s</a> for its comprehensive presentation of general topics, <a href="http://blog.sigfpe.com/" title="A Neighborhood of Infinity">Dan Piponi’s</a> for its concrete inquiries into abstract concepts, and <a href="http://jozefg.bitbucket.org/" title="Code &amp; Co">Danny Gratzer’s</a> for its meta stability while juggling. I’d write stuff mostly to help me think when I’m stuck, as preached by <a href="https://www.youtube.com/watch?v=g3dkRsTqdDA" title="How to Write a Great Research Paper">Simon Peyton Jones</a>, hoping to boost my <a href="http://www.scottaaronson.com/blog/?p=2651" title="Article on Scott Aaronson&#39;s blog mentioning this technique">public humiliation based</a> learning rate, or at least develop a new discipline for my fiat spaghetti brain.</p>
</div>
<div id="the-hakyll-pandoc-latex-mathml-combo" class="section level2">
<h2>The Hakyll / pandoc / LaTeX / MathML combo</h2>
<p>Overall I’m very happy with <a href="http://jaspervdj.be/hakyll" title="Hakyll">Hakyll</a>. I think this <a href="https://github.com/mmn80/mmn80.github.io.src" title="Source Repo for this Blog">2</a> - <a href="https://github.com/mmn80/mmn80.github.io" title="Main GitHub Pages Repo">repo</a> setup is the easiest to work with <a href="https://pages.github.com" title="GitHub Pages">GitHub Pages</a> hosting. I stole some code from Danny’s blog to get me started, but I got going quickly.</p>
<p><em>Hakyll</em> comes integrated with the powerful, multilingual <a href="http://pandoc.org/README.html" title="Pandoc User’s Guide">pandoc</a>, which allows writing the posts in an enriched <a href="http://daringfireball.net/projects/markdown/" title="Markdown">Markdown</a> dialect. For instance, you can write paper-like articles, post them on your blog, and also generate a <em>pdf</em> with the <code>pandoc</code> executable, all the while inlining <em>LaTeX</em> for math.</p>
<p>For rendering you can use a standard <em>js</em> service like <em>MathJax</em>, or a remote image service like <em>Google Chart API</em> with the <a href="http://hackage.haskell.org/package/pandoc/docs/Text-Pandoc-Options.html#t:HTMLMathMethod" title="Documentation for pandoc math rendering options"><code>WebTeX</code></a> option, or you can generate math images directly on your server with the <a href="https://hackage.haskell.org/package/latex-formulae-hakyll-0.2.0.1" title="The latex-formulae-hakyll package on Hackage"><strong>latex-formulae-hakyll</strong></a> package, which is also easy to setup. Currently, the blog uses the <a href="http://hackage.haskell.org/package/pandoc/docs/Text-Pandoc-Options.html#t:HTMLMathMethod" title="Documentation for pandoc math rendering options"><code>MathML</code></a> option to generate <em>MathML</em> directly, and inserts an icon under the title if the <em>md</em> file is explicitly tagged with <code>math</code> in the header section, like this post, to notify users they should use a proper browser like <em>Firefox</em> or <em>Safari</em>.</p>
<p>Here’s a test formula for you: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mi>f</mi><mo accent="true">^</mo></mover><mo stretchy="false" form="prefix">(</mo><mi>ξ</mi><mo stretchy="false" form="postfix">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mo>∞</mo></mrow><mo>∞</mo></msubsup><mi>f</mi><mo stretchy="false" form="prefix">(</mo><mi>x</mi><mo stretchy="false" form="postfix">)</mo><mspace width="0.222em"></mspace><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>π</mi><mi>i</mi><mi>x</mi><mi>ξ</mi></mrow></msup><mspace width="0.167em"></mspace><mi>d</mi><mi>x</mi><mo>.</mo></mrow><annotation encoding="application/x-tex">\hat{f}(\xi) = \int_{-\infty}^\infty f(x)\ e^{- 2\pi i x \xi}\,dx.</annotation></semantics></math></p>
</div>
<div id="web-theme" class="section level2">
<h2>Web theme</h2>
<p>I started with the default <em>Hakyll</em> theme but made a few adjustments.</p>
<p>All sizes, including fonts and page width, are relative (in <code>em</code> units). There is also no <code>font-family</code> setting, so the site will use the default fonts on all devices. High-dpi screens won’t turn the text into a series of microscopic black holes, while on wide screens the need for binoculars and current line markers for navigation will be eschewed.</p>
<p>The black icons are vectorial (<em>SVG</em>), so they look good on high-dpi too. With a <em>SVG</em> editor like <a href="https://inkscape.org/en/" title="Inkscape">Inkscape</a> it’s very fast to take some free icon from the net (wikipedia has plenty) and delete layers, change colors and sizes, or add your own. The hover effect just uses the <em>CSS3</em> <code>opacity</code> property.</p>
<p>I followed Dan’s example and inlined the <em>archive</em> page into <em>home</em> and <em>contact</em> into the footer. The reasoning is this: the text that would normally go there would be something generic, and I hope I’ll write more interesting things in the actual blog. So why would I pin that? Personal info belongs to social networking accounts these days, and being more honest by putting the index into <code>index.html</code> should assist search engines robots’ situational awareness (humans’ too!).</p>
<p>Hope this pasta is simple enough for a copy.</p>
</div>]]></summary>
</entry>

</feed>
