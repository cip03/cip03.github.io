<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Functional Transfixity</title>
    <link href="http://blog.mmn80.xyz/atom.xml" rel="self" />
    <link href="http://blog.mmn80.xyz" />
    <id>http://blog.mmn80.xyz/atom.xml</id>
    <author>
        <name>Călin Ardelean</name>
        <email>mmn80cpu@gmail.com</email>
    </author>
    <updated>2016-11-12T00:00:00Z</updated>
    <entry>
    <title>Phantom cats in a dynamical world</title>
    <link href="http://blog.mmn80.xyz/posts/2016-11-12-dynamic-existential.html" />
    <id>http://blog.mmn80.xyz/posts/2016-11-12-dynamic-existential.html</id>
    <published>2016-11-12T00:00:00Z</published>
    <updated>2016-11-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The <em>Criticism</em> section of the Wikipedia article on <a href="https://en.wikipedia.org/wiki/Late_binding" title="Late binding - Wikipedia">late binding</a> states:</p>
<blockquote>
<p>Late binding necessarily prevents the use of static type checking.</p>
</blockquote>
<p>That may be true, but traditional dynamic languages go further and enforce all bindings to be dynamic, deporting static types en masse. More recently, a movement known as “gradual typing” seeks to reverse this policy, with systems such as <a href="https://docs.racket-lang.org/ts-guide/index.html" title="The Typed Racket Guide">Typed Racket</a> reintroducing some (weak) static types to a dynamic language built on top of a more sophisticated compiler infrastructure.</p>
<p>In this post we’ll do the converse. We will see how a compiled language with a sufficiently powerful static type system, in our case <em>GHC Haskell</em>, can accommodate a fully dynamic meta environment that supports “real” live coding. We will use abstract data types implemented with the help of existential quantification to solve the module dependency problem that would otherwise force us to restart the world after every change and recompilation of either entity declaration modules, or world behaviors (eg: physics engine). We will also encounter phantom cats.</p>
<hr />
<p>Let’s start with a 3 module setup:</p>
<ul>
<li><code>Word</code> will hold our global state together with the abstract glue</li>
<li><code>Physics</code> will contain generic world behaviors</li>
<li><code>Cat</code> will be our example entity</li>
</ul>
<p><code>Physics</code> and <code>Cat</code> will import <code>World</code> and we will be able to independently make modifications and dynamically reload them in <code>ghci</code> without rebooting the world.</p>
<hr />
<div id="the-world" class="section level2">
<h2>The world</h2>
<p>This is how our world might look:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE ExistentialQuantification, RankNTypes, GeneralizedNewtypeDeriving #-}</span>

<span class="kw">module</span> <span class="dt">World</span> (<span class="dt">Entity</span>(<span class="fu">..</span>), <span class="dt">Ref</span>, spawn, withEntity, foldWorld) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Concurrent.MVar</span>
<span class="kw">import </span><span class="dt">System.IO.Unsafe</span>
<span class="kw">import qualified</span> <span class="dt">Data.IntMap.Strict</span> <span class="kw">as</span> <span class="dt">Map</span>

<span class="kw">class</span> <span class="dt">Entity</span> a <span class="kw">where</span>
<span class="ot">  health ::</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span>
<span class="ot">  attack ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a

<span class="kw">data</span> <span class="dt">EntityRecord</span> <span class="fu">=</span> forall a<span class="fu">.</span> <span class="dt">Entity</span> a <span class="ot">=&gt;</span> <span class="dt">EntityRecord</span> a

<span class="ot">world ::</span> <span class="dt">MVar</span> (<span class="dt">Map.IntMap</span> <span class="dt">EntityRecord</span>)
world <span class="fu">=</span> unsafePerformIO <span class="fu">$</span> newMVar Map.empty</code></pre></div>
<p><code>Entity</code> is our abstract entity class with a sample getter and setter inside.</p>
<p><code>EntityRecord</code> existentially wraps a pointer to a value of a type implementing the <code>Entity</code> interface, <em>together with the dictionary</em> of functions that any future version of us can use to interact with it abstractly, as we shall see.</p>
<p>We put all entities inside the global, thread safe, heterogeneous <code>world</code> map that will maintain our late bindings.</p>
<p>We also need an (internal) unique ID supply for the keys inside:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">newtype</span> <span class="dt">Ref</span> <span class="fu">=</span> <span class="dt">Ref</span> {<span class="ot"> getRef ::</span> <span class="dt">Int</span> } <span class="kw">deriving</span> <span class="dt">Num</span>

<span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Ref</span> <span class="kw">where</span> show (<span class="dt">Ref</span> k) <span class="fu">=</span> show k

<span class="ot">ref ::</span> <span class="dt">MVar</span> <span class="dt">Ref</span>
ref <span class="fu">=</span> unsafePerformIO <span class="fu">.</span> newMVar <span class="fu">$</span> <span class="dt">Ref</span> <span class="dv">0</span></code></pre></div>
<p>The generic <code>spawn</code> function will be used in a context where we have a specific entity type and its accompanying <code>Entity</code> instance.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">spawn ::</span> <span class="dt">Entity</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Ref</span>
spawn e <span class="fu">=</span> <span class="kw">do</span>
  <span class="dt">Ref</span> k <span class="ot">&lt;-</span> takeMVar ref
  <span class="kw">let</span> r <span class="fu">=</span> <span class="dt">Ref</span> (k <span class="fu">+</span> <span class="dv">1</span>)
  putMVar ref (r <span class="ot">`seq`</span> r)
  w <span class="ot">&lt;-</span> takeMVar world
  putMVar world <span class="fu">$</span> Map.insert (getRef r) (<span class="dt">EntityRecord</span> e) w
  return r</code></pre></div>
<p>The next 2 functions allow us to work generically with the world:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">withEntity ::</span> <span class="dt">Ref</span> <span class="ot">-&gt;</span> (forall a<span class="fu">.</span> <span class="dt">Entity</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> (a, b)) <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> b)
withEntity (<span class="dt">Ref</span> k) f <span class="fu">=</span> <span class="kw">do</span>
  w <span class="ot">&lt;-</span> takeMVar world
  <span class="kw">let</span> (w&#39;, mb) <span class="fu">=</span> <span class="kw">case</span> Map.lookup k w <span class="kw">of</span>
                   <span class="dt">Just</span> (<span class="dt">EntityRecord</span> e) <span class="ot">-&gt;</span> <span class="kw">let</span> (e&#39;, x) <span class="fu">=</span> f e <span class="kw">in</span>
                                            (Map.insert k (<span class="dt">EntityRecord</span> e&#39;) w, <span class="dt">Just</span> x)
                   <span class="dt">Nothing</span> <span class="ot">-&gt;</span> (w, <span class="dt">Nothing</span>)
  putMVar world w&#39;
  return mb

<span class="ot">foldWorld ::</span> <span class="dt">Monoid</span> m <span class="ot">=&gt;</span> (forall a<span class="fu">.</span> <span class="dt">Entity</span> a <span class="ot">=&gt;</span> <span class="dt">Ref</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> m) <span class="ot">-&gt;</span> <span class="dt">IO</span> m
foldWorld f <span class="fu">=</span> readMVar world <span class="fu">&gt;&gt;=</span> return <span class="fu">.</span> Map.foldMapWithKey f&#39;
  <span class="kw">where</span> f&#39; k (<span class="dt">EntityRecord</span> e) <span class="fu">=</span> f (<span class="dt">Ref</span> k) e</code></pre></div>
<p><code>withEntity</code> does a lookup based on a <code>Ref</code> and applies a caller supplied generic entity update function that also returns a <code>b</code>. Hence, the argument this function receives will be “late bound”.</p>
<hr />
<p>We use here <code>RankNTypes</code>. In case you see this for the first time it’s important to understand who, among the caller and callee, has the responsibility to supply each argument in a nested, polymorphic function type. If it’s the callee we call such location in the shape of the type (like the return type of the whole function) <strong>positive</strong>. And if it’s the caller, <strong>negative</strong>. It so happens that <em>School of Haskell</em> has published a <a href="https://www.schoolofhaskell.com/user/commercial/content/covariance-contravariance" title="Covariance, contravariance, and positive and negative position - School of Haskell">comprehensive article</a> on this very topic just as I was writing this. Lucky me.</p>
<p>After understanding variance we should observe that we are not talking here about who supplies values at run time, but rather who supplies type arguments at type checking time. But the analogy carries well when we remember that in <em>System F</em> (the basis for <em>Haskell Core</em>), type applications are explicit, and even more, in dependently typed languages all global distinctions between types and values melt away.</p>
<p>In <em>Core</em>, functions actually have extra lambda bindings for their type arguments, and these lambdas can appear in positive or negative positions just as before, except that the type applications can be evaluated at compile time, and all types eventually erased due to the limitations imposed in the language.</p>
<p>In old school parametric polymorphism all types are rank 1, meaning it’s always the caller that fills in type arguments, regardless of the variance of the (run time) arguments that have those types. So all big lambdas float to the top of a nested function, while small lambdas can get stuck submerged in a negative position.</p>
<p>Combining the two concepts, we see that a <em>negative</em> type argument afforded by a higher rank type not only that it forwards the whodunit question from the caller to the callee, but also from compile time to run time, in terms of <strong>when can we compile</strong> the specialized version of the function. This would be a sort of type theoretic explanation of JIT compilation. For the moment a very confused one, I’ll admit. As you may have guessed, I’m no expert.</p>
<hr />
<p>Returning to <code>withEntity</code>, both the <code>a</code> and the <code>Entity a</code> instance are chosen by the calee, ourselves, and we will pull those out of our <code>world</code> map.</p>
<p>The <code>foldWorld</code> function does a similar job as the <code>foldMap</code> from <code>Traversable</code>, but uses the above trick to do it abstractly.</p>
<hr />
</div>
<div id="the-entity" class="section level2">
<h2>The entity</h2>
<p>In the situation of losing all health, a non-black cat will turn black, and after that any attack will make it more powerful:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Cat</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">World</span>

<span class="kw">data</span> <span class="dt">Cat</span> <span class="fu">=</span> <span class="dt">Cat</span> {<span class="ot"> catHealth ::</span> <span class="dt">Int</span>,<span class="ot"> blackCat ::</span> <span class="dt">Bool</span> }

<span class="kw">instance</span> <span class="dt">Entity</span> <span class="dt">Cat</span> <span class="kw">where</span>
  health <span class="fu">=</span> catHealth
  attack p (<span class="dt">Cat</span> h b) <span class="fu">=</span> <span class="kw">if</span> b <span class="kw">then</span> <span class="dt">Cat</span> (h <span class="fu">+</span> p) b
                            <span class="kw">else</span> <span class="kw">if</span> p <span class="fu">&gt;</span> h <span class="kw">then</span> <span class="dt">Cat</span> <span class="dv">0</span> <span class="dt">True</span>
                                          <span class="kw">else</span> <span class="dt">Cat</span> (h <span class="fu">-</span> p) b</code></pre></div>
<hr />
</div>
<div id="physics" class="section level2">
<h2>Physics</h2>
<p>In our <code>Physics.hs</code> file we will only have a simple generic world tracing function. Notice how we do not import the <code>Cat</code>, and how the type system ensures that the function <code>f</code> we supply to <code>foldWorld</code> only uses the <code>Entity</code> interface abstractly:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Physics</span> (inspectWorld) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">World</span>

<span class="ot">inspectWorld ::</span> <span class="dt">IO</span> <span class="dt">String</span>
inspectWorld <span class="fu">=</span> foldWorld f
  <span class="kw">where</span> f r e <span class="fu">=</span> <span class="st">&quot;(id: &quot;</span> <span class="fu">++</span> show r <span class="fu">++</span> <span class="st">&quot;, health: &quot;</span> <span class="fu">++</span> show (health e) <span class="fu">++</span> <span class="st">&quot;) &quot;</span></code></pre></div>
<p>One could argue that this abstraction is a tremendous limitation concerning what kinds of generic traversals we can write, that we would have to keep adding methods to <code>Entity</code>, which do require rebooting the world.</p>
<p>But, at least in the case of video games, keeping a fixed, simple, generic type for entities is exactly what people do anyway, for many reasons. For instance, a physics engine, much like a garbage collector, does not care about the complex structure and behaviors of the objects it manages, but only about their mass and shape, mixing in properties like velocity and acceleration in its own private memory.</p>
<p>Another answer can be this Alan Perlis quote LISP people like to deploy when cornered:</p>
<blockquote>
<p>It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.</p>
</blockquote>
<p>Nevertheless, we could extend the simple setup described here with one of the solutions to the expression problem, like the <code>mtl</code> style, data types à la carte, or the <code>Free</code> / <code>Cofree</code> <a href="http://blog.sigfpe.com/2014/05/cofree-meets-free.html" title="A Neighborhood of Infinity: Cofree meets Free">pairing</a>. Exploring this is left as an exercise for the industrious reader. Which includes me, I hope.</p>
<hr />
</div>
<div id="doing-it-live" class="section level2">
<h2>Doing it live</h2>
<p>I should point out that the code in this post can also be found on <a href="https://github.com/mmn80/dynamic-meta" title="Github repo containing the code from this post">Github</a>.</p>
<p>So let’s fire up <code>stack ghci</code> and play.</p>
<p>The first thing we will do is activate <code>-fobject-code</code>, which allows <code>ghci</code> to use compiled, rather then interpreted code, albeit without <code>-O2</code> optimizations (but everything works with interpreted code as well). More, for all libraries we use, <code>ghci</code> will link against their statically or dynamically compiled versions (including the optimizations). So we can use a multi package setup for our game to arbitrate this convenience vs. performance trade off. Additionally, we’ll hope <code>ghci</code> will apply the <code>-O2</code>s in the future.</p>
<pre class="ghci"><code>λ&gt; :set -fobject-code 
λ&gt; :reload</code></pre>
<p>Let’s spawn a cat, send an attack message, and inspect the world:</p>
<pre class="ghci"><code>λ&gt; spawn $ Cat 100 False
1
λ&gt; withEntity 1 $ \cat -&gt; (attack 10 cat, health cat)
Just 100
λ&gt; inspectWorld
&quot;(id: 1, health: 90) &quot;</code></pre>
<p>All fine. Now let’s open our <code>Cat.hs</code> file, change how attacks work by making them twice as damaging, then save the file:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Entity</span> <span class="dt">Cat</span> <span class="kw">where</span>
  health <span class="fu">=</span> catHealth
  attack p (<span class="dt">Cat</span> h b) <span class="fu">=</span> <span class="kw">if</span> b <span class="kw">then</span> <span class="dt">Cat</span> (h <span class="fu">+</span> p) b
                            <span class="kw">else</span> <span class="kw">if</span> p <span class="fu">&gt;</span> h <span class="kw">then</span> <span class="dt">Cat</span> <span class="dv">0</span> <span class="dt">True</span>
                                          <span class="kw">else</span> <span class="dt">Cat</span> (h <span class="fu">-</span> <span class="dv">2</span><span class="fu">*</span>p) b</code></pre></div>
<p>We now switch back to our <code>ghci</code> terminal and <code>:reload</code> (I formatted the output a bit):</p>
<pre class="ghci"><code>λ&gt; :reload
[3 of 4] Compiling Cat  ( /home/calin/src/dynamic-meta/src/Cat.hs,
                          /home/calin/src/dynamic-meta/.stack-work/odir/Cat.o )
Ok, modules loaded:
World (/home/calin/src/dynamic-meta/.stack-work/odir/World.o),
Physics (/home/calin/src/dynamic-meta/.stack-work/odir/Physics.o),
Cat (/home/calin/src/dynamic-meta/.stack-work/odir/Cat.o)</code></pre>
<p><code>ghci</code> has recompiled our <code>Cat.hs</code> and has placed the resulting object file in a subfolder called <code>odir</code> of our <code>stack</code> working environment.</p>
<p>Now let’s check the world:</p>
<pre class="ghci"><code>λ&gt; inspectWorld 
&quot;(id: 1, health: 90) &quot;</code></pre>
<p>Interesting. Our old cat is still there, even if neither the source file defining its internals, nor the compiled object file still exist. A phantom cat!</p>
<p>Let’s see if we can add a new cat and test how both it and the phantom behave when attacked:</p>
<pre class="ghci"><code>λ&gt; spawn $ Cat 100 False
2
λ&gt; withEntity 1 $ \cat -&gt; (attack 10 cat, health cat)
Just 90
λ&gt; withEntity 2 $ \cat -&gt; (attack 10 cat, health cat)
Just 100
λ&gt; inspectWorld
&quot;(id: 1, health: 80) (id: 2, health: 80) &quot;</code></pre>
<p>Our new cat takes a 20 hit for a 10 attack, as expected, but the phantom still takes 10 as before!</p>
<p>So there it is, 2 versions of the “same” object type, together with their methods, both compiled, coexisting in peace and type safety inside the same heap. If this does not make both Alan Kay and Robert Harper happy, I don’t know what will. I’m joking, of course. Nothing can restore those guys’ faith in humanity after what we did with their ideas.</p>
<p>We can also make changes to the <code>Physics</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">inspectWorld ::</span> <span class="dt">IO</span> <span class="dt">String</span>
inspectWorld <span class="fu">=</span> foldWorld f
  <span class="kw">where</span> f r e <span class="fu">=</span> <span class="st">&quot;(id = &quot;</span> <span class="fu">++</span> show r <span class="fu">++</span> <span class="st">&quot;, health = &quot;</span> <span class="fu">++</span> show (health e) <span class="fu">++</span> <span class="st">&quot;) &quot;</span></code></pre></div>
<p>…reload, and check if the world still exists:</p>
<pre class="ghci"><code>λ&gt; :reload
[3 of 4] Compiling Physics ( /home/calin/src/dynamic-meta/src/Physics.hs,
                             /home/calin/src/dynamic-meta/.stack-work/odir/Physics.o )
Ok, modules loaded:
World (/home/calin/src/dynamic-meta/.stack-work/odir/World.o),
Physics (/home/calin/src/dynamic-meta/.stack-work/odir/Physics.o),
Cat (/home/calin/src/dynamic-meta/.stack-work/odir/Cat.o).
λ&gt; inspectWorld
&quot;(id = 1, health = 80) (id = 2, health = 80) &quot;</code></pre>
<hr />
</div>
<div id="final-remarks" class="section level2">
<h2>Final remarks</h2>
<p>If we consider those <code>Ref</code>s as variables, with objects holding dynamic references to each other (by <code>Ref</code>), forcing us to use something like <code>withEntity</code> all the time, then of course we have a late binding implementation that is untyped, unsafe, slow, and in general suffering from all the ills mentioned in that wiki article (“entity not found”, etc).</p>
<p>Just like in <em>Racket</em>, we can unfold some macros, sub types and contracts to tame them. But we could also have objects hold normal, immutable pointers to each other that only get updated once per frame, automatically. I’ll have to think about this more.</p>
<hr />
<p>GHC’s in-house linker that makes all this possible, I have no clue about what it does. Tis magic.</p>
<hr />
<p>GHC has a type called <code>Dynamic</code> that cannot be used for live coding to the same extent, since opening a <code>Dynamic</code> inside a generic world traversal will introduce a module dependency to the entity definition module. So I think <code>Dynamic</code> does not live up to its name, at least not in <a href="http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en" title="Dr. Alan Kay on the Meaning of “Object-Oriented Programming”">Alan Key’s</a> <a href="https://computinged.wordpress.com/2010/09/11/moti-asks-objects-never-well-hardly-ever/" title="In the comments section of this blog post, Alan Key suggests using the term “dynamic” to capture what he meant by OOP before that term&#39;s hijacking">sense</a>.</p>
<hr />
<p>As for me, I’ll go read that Reynolds “GEDANKEN” paper Alan Key mentions, and further explore the connection between “dynamic” and “higher rank”, which undoubtedly will turn out to involve some trivial misunderstandings on my part. But at least I’ll have the motivation to learn more type theory.</p>
</div>]]></summary>
</entry>
<entry>
    <title>Notes about this web site's bowels</title>
    <link href="http://blog.mmn80.xyz/posts/2016-02-23-blog-setup.html" />
    <id>http://blog.mmn80.xyz/posts/2016-02-23-blog-setup.html</id>
    <published>2016-02-23T00:00:00Z</published>
    <updated>2016-02-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div id="contents" class="section level3">
<h3>Contents</h3>
<ul>
<li><a href="#static-generator">Static generator</a></li>
<li><a href="https://hackage.haskell.org/package/diagrams" title="The diagrams package on Hackage">Diagrams</a></li>
<li><a href="#web-theme">Web theme</a></li>
<li><a href="#comments">Comments</a></li>
<li><a href="#tracking-analytics">Tracking &amp; analytics</a></li>
</ul>
</div>
<div id="static-generator" class="section level2">
<h2>Static generator</h2>
<p>Overall I’m quite pleased with <a href="http://jaspervdj.be/hakyll" title="Hakyll">Hakyll</a>, the Haskell <a href="http://jekyllrb.com/" title="Jakyll">Jakyll</a>.</p>
<p>For convenient <a href="https://pages.github.com" title="GitHub Pages">GitHub Pages</a> hosting, you can either keep the sources in the same repo with the output, in which case you’ll need some convoluted scripts to strap it together, or you can figure it’s not worth the bother and just manage a slightly more tedious <a href="https://github.com/mmn80/mmn80.github.io.src" title="Source Repo for this Blog">2</a> - <a href="https://github.com/mmn80/mmn80.github.io" title="Main GitHub Pages Repo">repo</a> setup, like me. After committing changes in the source repo, I run <code>site deploy</code> and then <code>git commit</code> and <code>git push</code> the front repo. I even dig the extra control.</p>
<p><em>Hakyll</em> comes integrated with the mighty, multilingual <a href="http://pandoc.org/README.html" title="Pandoc User’s Guide">pandoc</a>, that champions an enriched <a href="http://daringfireball.net/projects/markdown/" title="Markdown">Markdown</a> dialect I’m delighted to dance with. In particular, you can write paper-like articles, publish them straightforwardly on your blog, and generate alongside a <em>pdf</em> with the <code>pandoc</code> executable, all the while inlining <em>LaTeX</em> for math.</p>
<p>To render the formulas you can pick a standard <em>js</em> service like <em>MathJax</em> or, with the <a href="http://hackage.haskell.org/package/pandoc/docs/Text-Pandoc-Options.html#t:HTMLMathMethod" title="Documentation for pandoc math rendering options"><code>WebTeX</code></a> constructor, a remote image service like <em>Google Chart API</em>, or you can generate math images directly on your server with the <a href="https://hackage.haskell.org/package/latex-formulae-hakyll-0.2.0.1" title="The latex-formulae-hakyll package on Hackage"><strong>latex-formulae-hakyll</strong></a> package, all painless to setup. Currently, the blog employs the <a href="http://hackage.haskell.org/package/pandoc/docs/Text-Pandoc-Options.html#t:HTMLMathMethod" title="Documentation for pandoc math rendering options"><code>MathML</code></a> variant to deliver <em>MathML</em> directly inside the <em>XHTML</em>. Moreover, it injects an icon under the headline (but only if the <em>Markdown</em> source file is explicitly tagged with <code>math</code> in the header section, like this post’s), to encourage readers to use a browser sporting native <em>MathML</em>, like <em>Firefox</em> or <em>Safari</em>.</p>
<p>Here’s a test formula for you: <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover><mi>f</mi><mo accent="true">^</mo></mover><mo stretchy="false" form="prefix">(</mo><mi>ξ</mi><mo stretchy="false" form="postfix">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi>∞</mi></mrow><mi>∞</mi></msubsup><mi>f</mi><mo stretchy="false" form="prefix">(</mo><mi>x</mi><mo stretchy="false" form="postfix">)</mo><mspace width="0.222em"></mspace><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>π</mi><mi>i</mi><mi>x</mi><mi>ξ</mi></mrow></msup><mspace width="0.167em"></mspace><mi>d</mi><mi>x</mi><mi>.</mi></mrow><annotation encoding="application/x-tex">\hat{f}(\xi) = \int_{-\infty}^\infty f(x)\ e^{- 2\pi i x \xi}\,dx.</annotation></semantics></math></p>
</div>
<div id="diagrams" class="section level2">
<h2>Diagrams</h2>
<p>I’m searching for a language in the style of <em>Markdown</em>, a thin layer on top of <em>SVG</em> with little dependencies and whose compiler would be easy to reproduce in whatever platform of the future.</p>
<p><em>AsciiArt</em> can also be read in source form, and there are some scripts out there to convert it into something vectorial, but it’s still too limited as a general solution, and does not support “pass through” extensibility like <em>Markdown</em>. At the other extreme I could use <a href="https://hackage.haskell.org/package/diagrams" title="The diagrams package on Hackage">diagrams</a> directly inside a code block and run it with <code>runghc</code> from the filter.</p>
<p>So currently I’d generate the <em>SVG</em> in <em>Inkscape</em> or, for simpler diagrams I’d write them by hand. To make the latter easier, I added a <em>Pandoc</em> filter to <em>Hakyll</em> and a code block parser so I can write <em>XML</em> with indentation rules instead of tags. I’m thinking to improve it with a simple template system, so I could define higher level things like “nodes” and “links” and reduce in this way the verbosity. I like this approach very much and I hope I’ll get to something deserving of the <em>Markdown</em> analogy.</p>
<svg width="40em" height="5em" viewBox="-100 0 400 50">
  <defs>
    <symbol id="node">
      <ellipse style="fill:white;stroke:black;stroke-width:3;" cx="24" cy="24" rx="20" ry="20" />
    </symbol>
    <marker id="arrowhead" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="4" markerHeight="3" orient="auto">
      <path d="M 0 0 L 10 5 L 0 10 z" />
    </marker>
    <symbol id="arrow">
      <path style="fill:none;stroke:black;stroke-width:3;" d="M2,5 C2,5 50,5 50,5" marker-end="url(#arrowhead)" />
    </symbol>
    <filter id="conv" filterUnits="userSpaceOnUse" x="0" y="0" width="500" height="500">
      <feConvolveMatrix order="5" preserveAlpha="true" kernelMatrix="2 0 1 0 2 0 1 2 1 0 1 2 -8 2 1 0 1 2 1 0 2 0 1 0 2" />
    </filter>
  </defs>
  <g filter="url(#conv)">
    <use xlink:href="#node" />
    <text text-anchor="middle" x="24" y="28">
      λ
    </text>
  </g>
  <g transform="translate(100,0)">
    <use xlink:href="#node" />
    <text text-anchor="middle" x="24" y="28">
      λ
        <tspan fill="red">
          π
        </tspan>
    </text>
  </g>
  <g transform="translate(200,0)" filter="url(#conv)">
    <use xlink:href="#node" />
    <text text-anchor="middle" x="24" y="28" fill="red">
      π
    </text>
  </g>
  <use x="42" y="18" xlink:href="#arrow" />
  <use x="0" y="0" xlink:href="#arrow" transform="translate(205,28) rotate(180)" />
</svg>
</div>
<div id="web-theme" class="section level2">
<h2>Web theme</h2>
<p>I started with the default <em>Hakyll</em> theme but made a few adjustments.</p>
<p>All sizes, including fonts and page width, are relative (in <code>em</code> units). There is also no <code>font-family</code> setting, so the site will use the default fonts on all devices. High-dpi displays won’t collapse the text into a string of microscopic black holes, while on wide screens the need for binoculars and current line markers for navigation will be eschewed.</p>
<p>I’m using the <code>text-align: justify</code> alignment together with the <code>hyphens: auto</code> <em>CSS3</em> option which I just learned about. Initially the document was <em>XHTML</em> but in order to make <code>hyphens: auto</code> work, I needed to add beside <code>xml:lang=&quot;en&quot;</code> also <code>lang=&quot;en&quot;</code> which makes the validator complain. So I switched to <em>HTML5</em> and everything is fine.</p>
<p>The black icons are vectorial (<em>SVG</em>), so they look smooth on high-dpi too. With a <em>SVG</em> editor like <a href="https://inkscape.org/en/" title="Inkscape">Inkscape</a> it’s snappy to take some public domain icon from the net (wikipedia has plenty) and delete layers, change colors and sizes, or add your own shapes. The hover effect just uses the <em>CSS3</em> <code>opacity</code> property. I’ll be using <em>SVG</em> for diagrams too.</p>
<p>I followed <a href="http://blog.sigfpe.com/" title="A Neighborhood of Infinity">Dan Piponi</a>‘s example and inlined the <em>archive</em> page into <em>home</em> and <em>contact</em> into the footer. I reckoned the text that would normally go there would be something generic, and surely I’d write more compelling things in the actual blog?!? So why would I pin the trivia? These days, personal info belongs to social networking accounts. And being more honest by placing the index inside <code>index.html</code> should benefit search engine robots’ situational awareness (humans’ too!).</p>
<p>Hope this pasta is plain enough for a copy.</p>
</div>
<div id="comments" class="section level2">
<h2>Comments</h2>
<p>Initially I had a <em>Disqus</em> comments section, but then I read <a href="http://chrisdone.com/posts/blog-comments" title="Comments on my blog - Chris Done">Chris Done’s post</a> and reconsidered.</p>
<p>Indeed, the matter was bothering me since the beginning but couldn’t quite say why. I don’t really buy the “freedom of expression” or “unpopular ideas” framing, but still regard blog comments sections as the worst possible avenue of online debate. Yes, worse then youtube, but let me explain.</p>
<p>First, let’s get out of the way issues like typos and other corrections. E-mail works great for that.</p>
<p>Then there is the problem of ownership, or hosting, in relation to each comment and the discussion as a whole. <em>Disqus</em> deals with the first part, I assume (website disappears, but you keep your, now meaningless, comments), but for people to entrust their effort posts to a host, they need to ascertain its reliability, fairness, and general usefulness. This may involve having good and active moderators, trusting the website won’t drop its back archives due to some natural, financial or legal issue, expecting many dialog-worthy individuals on the same page, etc.</p>
<p>But, due to network effects, it is in the nature of all these things to reinforce each other. Hence, the best places to publicly talk about anything, including blog posts, will always be popular hangouts specifically tuned for this purpose, like <em>reddit</em> and other forums, or community blogs like the <a href="https://golem.ph.utexas.edu/category/" title="The n-Category Café">The n-Category Café</a>, or famous professors’ blogs.</p>
<p>As for the rest of us, if once in a while you write an article whose intent is to provoke debate, you can always post it in such a forum and, if you like, link the forum thread at the back of your article.</p>
</div>
<div id="tracking-analytics" class="section level2">
<h2>Tracking &amp; analytics</h2>
<p>I’m a total hypocrite.</p>
<p>I won’t add much as it should be pretty clear what I mean. This is also why I think confiding private data to governments or corporations is the worst idea ever. They are people like you &amp; me, after all. Well, me, as I don’t know you.</p>
</div>]]></summary>
</entry>
<entry>
    <title>Pun hazard, watch it!</title>
    <link href="http://blog.mmn80.xyz/posts/2016-02-22-name.html" />
    <id>http://blog.mmn80.xyz/posts/2016-02-22-name.html</id>
    <published>2016-02-22T00:00:00Z</published>
    <updated>2016-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Welcome to the jungle!</p>
<p>This is my personal blog on functional programming and its application to real-time simulation. You may expect intermittent pieces on logic <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mo>∩</mo><annotation encoding="application/x-tex">\cap</annotation></semantics></math> math <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mo>∩</mo><annotation encoding="application/x-tex">\cap</annotation></semantics></math> physics, and hopefully not too many rants. But ultimately, I have no clue what the blog will end up raving about. For all I know it could spawn enormous Juche pumas playing cylindrical Go along Iapetus’ equatorial ridge, sabotaging the moon’s hydrostatic balance.</p>
<p>Worse, I couldn’t seize it a rigid designator, leading to a dangerous pun compromise. But allow me to waste your time by first elaborating incoherently and then, apologizing unconvincingly.</p>
<hr />
<p><a href="https://en.wikipedia.org/wiki/Functional_fixedness" title="Functional fixedness - Wikipedia">Functional fixity</a> is a term from cognitive science describing one’s inability to use an object in a novel way. It’s your memory entangling the representation of the object with that of its intended function, typically after prolonged usage.</p>
<p>For instance, after learning to work a monad to a particular goal, a fledgling Haskeller may feel inclined to blog about what monads are like, promptly forgetting the structure and laws of the mathematical object, a lapse that has little to do, I’ll argue, with the suitability of figurative language for presenting abstract concepts.</p>
<p>Brent Yorgey’s <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/" title="Abstraction, intuition, and the “monad tutorial fallacy”">classic article</a> tells the story of the failed monad tutor who supplies just the root of his intuition and expects the entire tree to magically string along into his reader’s head, confusing, as it were, the simple pattern used for naming common metaphors (<strong>A is B</strong>), with the metaphors themselves, which are relations that develop from basic inter-domain mappings of arbitrary size. The article suggests that humans don’t learn abstract concepts directly, but gradually get accustomed with more of their incarnations and business roles, to the point of epiphany.</p>
<p>But throughout the story there is an undertone, or potential uncharitable reading, of a rusty grammarian that ’splains: <em>“analogy is bad, m’kay?”</em>. The Haskell community was quick to pick up on it, and confessed they actually <em>take no pickle with <a href="http://blog.plover.com/prog/burritos.html" title="Monads are like burritos - The Universe of Discourse">burrito</a> expositions</em>. And I concur, even outright allegories are fly as long as the mapping maintains a sense of <a href="http://blog.sigfpe.com/2014/05/types-and-two-approaches-to-problem.html" title="Types, and two approaches to problem solving - A Neighborhood of Infinity">faithfulness</a> that allows crisscrossing the domain boundaries without garbling the meaning, and the author doesn’t forget to mention all of its independent generators.</p>
<p>I also think that people are pretty good at it<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, and the confusion Brent’s article poses is a bit of a straw man, as the real problem is not only deeper, but it affects smart, educated people significantly more. I’m talking about functional fixity, a case of <em>“the curse of knowledge”</em>, two concepts I’ve recently been exposed to by Steven Pinker’s wonderful book <a href="http://wadler.blogspot.ro/2016/02/steven-pinkers-sense-of-style.html" title="Steven Pinker&#39;s The Sense of Style - Wadler&#39;s Blog">“The Sense of Style”</a>.</p>
<p>Knowledge is cursed by intelligence, the book goes<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>. More intelligence founds more opportunities for the curse to strike, and intensifies the virulence inside each area. Imagine a cloud-hosted compiler so smart, that it understands your program is socially or economically expandable, and all of it gets eliminated as dead code. You’d have to fight it, politically. Likewise, our extra keen memory will be better at compressing our experience of the <em>path</em> we took to reach it, to a more lucrative, but potentially deceitful arrangement.</p>
<p>But this doesn’t mean our metaphor is somehow fundamentally mangled, rendered useless for teaching, or worse, all metaphors are, and only some thoroughly puritan hard work can make you comprehend a heavenly subject. On the contrary, the monad tutor is orthodox in believing that <em>“if it works for me, it could help others too”</em>. It’s all a question of making sure it actually works, and having a consistent &amp; complete rendition, which can be achieved, against the odds brought about by the curse of knowledge, with analogy remodeling and some, well, hard work.</p>
<p>When writing about something, notwithstanding your preference for the <strong>classic style</strong> of exposition, where you speak as if you have something to show and you’re merely guiding the reader towards a <em>better vantage point</em>, you are still essentially creating entirely new knowledge, and should only consider what you already know as one among many aids. But the classic style itself is exactly such an aid, specifically a metaphor, recommended for its efficiency in reducing the bloat caused by, to quote Pinker, <em>“metadiscourse, signposting, hedging, apologizing, professional narcissism, clichés, mixed metaphors, metaconcepts, zombie nouns, and unnecessary passives”</em>.</p>
<p>Rather then wailing destitution, potatoes can elate your salvation.<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a></p>
<hr />
<p>Now look at what happened during the previous section. In a narcissistic bid to justify the pun in the name of the website, I’ve expanded and duct-taped an argument resting on a misinterpretation of Brent’s article. This reveals the fundamental moral hazard that figurative language imparts. If you want to be the funny guy but mess up your punch lines, it’s just your audience that would have payed up the price. Eventually though, you’ll end up with negative credit.</p>
<p>The safe bet is to use a single, well known, overarching allegory, like the one at the core of the classic style, aka <em>the hitchhiker’s guide</em>. If you also yearn for local boosts, make sure they are connected in a tree of relatedness, and enforce a cost restriction for each fork. The payload you provide must be worth the context switch your reader will have to carry out when changing branch; it needs not be atomic though, just an admix of staggered reimbursements, like with <a href="http://www.cambridge.org/ro/academic/subjects/computer-science/programming-languages-and-applied-logic/purely-functional-data-structures?format=PB&amp;isbn=9780521663502" title="Chris Okasaki - Purely Functional Data Structures">Okasaki’s</a> <em>banker’s method</em>.</p>
<p>I leave this cortege of thought in its current insolvent state, as a testament for future me: <a href="https://www.youtube.com/watch?v=bBu7b1jMUrU" title="I did watch it! The save! - Matt Malone"><em>Watch it!</em></a></p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This statement introduces the central incoherency, as the main point is about hazards and such, but this was the last opportunity to lead into my functional fixity stuff. Without it, the non sequitur would have been all too obvious.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Not really. I start by paraphrasing, but quickly devolve into unsupported interpretations.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>This whack of poetry was originally some place above, but every paragraph passed it on in aversion, all the way to the back of the section where, amusingly, it met Pinker’s lament about mixed metaphors.<a href="#fnref3">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>

</feed>
